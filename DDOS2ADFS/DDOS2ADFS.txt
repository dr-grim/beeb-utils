   10  REM DDOS2ADFS - Copy Opus DDOS 720k to ADFS 640k
   20  
   30  REM v0.9.1 added 512 bytes to BASIC, case folded dirs when checking
   40  REM v0.9 - first draft, needs testing
   50  
   60  REM log levels: 0=quiet, 1=headlines, 2=detail
   70  logLevel% = 1
   80  
   90  MODE 128
  100  
  110  OSWORD = &FFF1
  120  OSGBPB = &FFD1
  130  DIM fileNames$(30), loadAddresses%(30), execAddresses%(30), lengths%(30)
  140  DIM directoryNames$(30), fileLocks%(30), volumePresent%(7)
  150  volumeTitle$ = ""
  160  currentFS$ = ""
  170  DIM oswordScratch% 32, rawSectorData% &0200
  180  rawSectorA% = rawSectorData%
  190  rawSectorB% = rawSectorData% + &0100
  200  
  210  IF HIMEM <> &8000 THEN PRINT "HIMEM=&";~HIMEM;" - already moved; reset to default and rerun":END
  220  memoryEndAddress% = HIMEM
  230  memoryStartAddress% = LOMEM + &1A00
  240  HIMEM = memoryStartAddress%
  250  maxFileSize% = memoryEndAddress% - memoryStartAddress%
  260  
  270  FOR driveNumber% = 0 TO 2 STEP 2
  280  PRINT
  290  PRINT "=============================="
  300  PRINT "Drive ";driveNumber%
  310  PRINT "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"
  320  PROCreadOpusVolumes(driveNumber%)
  330  FOR volumeNumber% = 0 TO 7
  340  IF volumePresent%(volumeNumber%) THEN PROCcopyVolume(driveNumber%, volumeNumber%)
  350  NEXT
  360  NEXT
  370  END
  380  
  390  DEF PROCreadOpusVolumes(driveNumber%)
  400  PROCsetFS("DISC")
  410  IF logLevel% > 1 THEN PRINT "Reading DDOS volume list"
  420  PROCreadSector(driveNumber%, 0, 16, 1) : REM get DDOS volumes
  430  FOR volumeNumber% = 0 TO 7
  440  volumePresent%(volumeNumber%) = (rawSectorA%?(&08 + 2*volumeNumber%) <> 0)
  450  NEXT
  460  ENDPROC
  470  
  480  DEF PROCcopyVolume(driveNumber%, volumeNumber%)
  490  LOCAL driveName$, fileIndex%, directoryName$, fileName$
  500  LOCAL sourceFileName$, targetFileName$
  510  LOCAL numChunks%, chunk%, length%, fileOffset%, dataRemaining%
  520  
  530  driveName$ = FNdriveName(driveNumber%, volumeNumber%)
  540  IF logLevel% > 0 THEN PRINT "Copying drive ";driveName$;" to "":0.$.";driveName$;""""
  550  PROCsetFS("ADFS")
  560  PROCadfsCdir(driveName$)
  570  PROCsetFS("DISC")
  580  numFiles% = FNreadCatalogue(driveNumber%, volumeNumber%)
  590  IF numFiles% = 0 THEN ENDPROC
  600  
  610  directoriesCreated$ = "$"
  620  FOR fileIndex% = 0 TO numFiles%-1
  630  directoryName$ = directoryNames$(fileIndex%)
  640  fileName$ = fileNames$(fileIndex%)
  650  IF INSTR(directoriesCreated$, directoryName$) = 0 THEN PROCadfsCdir(driveName$+"."+directoryName$):directoriesCreated$=directoriesCreated$+FNupperAndLowerCase(directoryName$)
  660  IF INSTR(fileName$, ".") THEN targetFileName$ = FNfilteredFileName(fileName$) ELSE targetFileName$ = fileName$
  670  IF directoryName$ <> "$" THEN targetFileName$ = directoryName$ + "." + targetFileName$
  680  targetFileName$ = ":0.$." + driveName$ + "." + targetFileName$
  690  
  700  sourceFileName$ = ":"+driveName$+"."+directoryName$+"."+fileName$
  710  
  720  length% = lengths%(fileIndex%)
  730  numChunks% = length% DIV maxFileSize%
  740  IF length% MOD maxFileSize% > 0 THEN numChunks% = numChunks% + 1
  750  fileOffset% = 0
  760  dataRemaining% = length%
  770  
  780  IF logLevel% > 0 THEN PRINT "Copying """;sourceFileName$;""" to """;targetFileName$;""" in ";numChunks%;" chunk(s)"
  790  FOR chunk%=1 TO numChunks%
  800  IF dataRemaining% < maxFileSize% THEN chunkLength% = dataRemaining% ELSE chunkLength% = maxFileSize%
  810  PROCsetFS("DISC")
  820  PROCloadData(sourceFileName$, memoryStartAddress%, chunkLength%, fileOffset%)
  830  
  840  PROCsetFS("ADFS")
  850  IF chunk% = 1 THEN saveCommand$ = "*SAVE """ + targetFileName$ + """ " + STR$~(memoryStartAddress%) + " +" + STR$~(chunkLength%) + " " + STR$~(loadAddresses%(fileIndex%)) + " " + STR$~(execAddresses%(fileIndex%))
  860  IF chunk% = 1 AND logLevel% > 1 THEN PRINT saveCommand$
  870  IF chunk% = 1 THEN OSCLI(saveCommand$) ELSE PROCsaveData(targetFileName$, memoryStartAddress%, chunkLength%, fileOffset%)
  880  
  890  fileOffset% = fileOffset% + chunkLength%
  900  dataRemaining% = dataRemaining% - chunkLength%
  910  NEXT
  920  
  930  NEXT
  940  
  950  IF logLevel% > 0 THEN PRINT "Folder "":0.$.";driveName$;""" title set to """;volumeTitle$;""""
  960  oscliDirChange$ = "*DIR :0.$." + driveName$
  970  IF logLevel% > 1 THEN PRINT oscliDirChange$
  980  OSCLI(oscliDirChange$)
  990  IF volumeTitle$ = "" THEN oscliSetTitle$ = "*TITLE" ELSE oscliSetTitle$ = "*TITLE """ + volumeTitle$ + """"
 1000  IF logLevel% > 1 THEN PRINT oscliSetTitle$
 1010  OSCLI(oscliSetTitle$)
 1020  IF logLevel% > 1 THEN PRINT "*DIR :0.$"
 1030  OSCLI("*DIR :0.$") : REM back to root folder
 1040  
 1050  PRINT "------------------------------"
 1060  ENDPROC
 1070  
 1080  DEF FNupperAndLowerCase(s$)
 1090  LOCAL extra$
 1100  IF ASC(s$) >= ASC("a") AND ASC(s$) <= ASC("z") THEN extra$ = CHR$(ASC(s$) - ASC("a") + ASC("A"))
 1110  IF ASC(s$) >= ASC("A") AND ASC(s$) <= ASC("Z") THEN extra$ = CHR$(ASC(s$) - ASC("A") + ASC("a"))
 1120  = s$ + extra$
 1130  
 1140  DEF PROCcreateSubdirsAsRequired(driveName$, directoryName$, fileName$)
 1150  LOCAL subDir$, trailingDir$
 1160  IF directoryName$ = "$" THEN trailingDir$ = "" ELSE trailingDir$=directoryName$+"."
 1170  subDir$ = LEFT$(fileName$, INSTR(fileName$, ".")-1)
 1180  PROCadfsCdir(driveName$+"."+trailingDir$+subDir$)
 1190  ENDPROC
 1200  
 1210  DEF FNdriveName(drive%, volume%)
 1220  = CHR$(ASC("0") + drive%) + CHR$(ASC("A") + volume%)
 1230  
 1240  DEF FNreadCatalogue(driveNumber%, volumeNumber%)
 1250  IF logLevel% > 1 THEN PRINT "Reading catalogue for drive ";FNdriveName(driveNumber%,volumeNumber%)
 1260  
 1270  PROCreadSector(driveNumber%, 0, volumeNumber%*2, 2)
 1280  volumeTitle$ = FNstringFromMemory(rawSectorA%, 8) + FNstringFromMemory(rawSectorB%, 4)
 1290  IF logLevel% > 0 THEN PRINT "Volume title: """;volumeTitle$;""""
 1300  numEntries% = (rawSectorB%?&05) / 8
 1310  IF logLevel% > 1 THEN PRINT "Number of files: ";numEntries%
 1320  
 1330  FOR fileIndex% = 0 TO numEntries%-1
 1340  fileNames$(fileIndex%) = FNstringFromMemory(rawSectorA% + &08 + &08*fileIndex%, 7)
 1350  fileNames$(fileIndex%) = FNtrimTrailingSpaces(fileNames$(fileIndex%))
 1360  directoryNames$(fileIndex%) = CHR$(rawSectorA%?(&08 + &08*fileIndex% + 7) AND &7F)
 1370  fileLocks%(fileIndex%) = rawSectorA%?(&08 + &08*fileIndex% + 7) > &7F
 1380  highWordFlags% = rawSectorB%?(&08 + 8*fileIndex% + 6)
 1390  loadAddresses%(fileIndex%) = FNword(rawSectorB% + (&08 + 8*fileIndex% + 0)) + FNhighProcessorWord(highWordFlags%, &03)
 1400  execAddresses%(fileIndex%) = FNword(rawSectorB% + (&08 + 8*fileIndex% + 2)) + FNhighProcessorWord(highWordFlags%, &0C)
 1410  lengths%(fileIndex%) = FNword(rawSectorB% + (&08 + 8*fileIndex% + 4)) + FNhighProcessorWord(highWordFlags%, &30)
 1420  NEXT
 1430  = numEntries%
 1440  
 1450  DEF PROCprintFileCatalogue
 1460  fileIndex% = 0
 1470  REPEAT
 1480  IF fileIndex% < numEntries% THEN PRINT FNfileInfoAsString(fileIndex%)
 1490  fileIndex% = fileIndex% + 1
 1500  UNTIL fileIndex% > numEntries%
 1510  ENDPROC
 1520  
 1530  DEF FNword(memory%)
 1540  = memory%?0 + memory%?1 * &0100
 1550  
 1560  DEF FNhighProcessorWord(byte%, mask%)
 1570  IF (byte% AND mask%) <> 0 THEN =&FFFF0000 ELSE =&00000000
 1580  
 1590  DEF FNtrimTrailingSpaces(string$)
 1600  LOCAL trimmedString$
 1610  trimmedString$ = string$
 1620  REPEAT
 1630  IF RIGHT$(trimmedString$, 1) = " " THEN trimmedString$ = LEFT$(trimmedString$, LEN(trimmedString$)-1)
 1640  UNTIL RIGHT$(trimmedString$, 1) <> " " OR LEN(trimmedString$) = 0
 1650  =trimmedString$
 1660  
 1670  DEF FNfileInfoAsString(fileIndex%)
 1680  LOCAL info$, lock$
 1690  paddedFileName$ = fileNames$(fileIndex%) + STRING$(7-LEN(fileNames$(fileIndex%)), " ")
 1700  info$ = directoryNames$(fileIndex%) + "." + paddedFileName$ + " "
 1710  IF fileLocks%(fileIndex%) THEN lock$ = "L" ELSE lock$ = " "
 1720  info$ = info$ + lock$
 1730  info$ = info$ + " " + FNaddressToHexString(loadAddresses%(fileIndex%))
 1740  info$ = info$ + " " + FNaddressToHexString(execAddresses%(fileIndex%))
 1750  info$ = info$ + " " + FNaddressToHexString(lengths%(fileIndex%))
 1760  = info$
 1770  
 1780  DEF FNaddressToHexString(address%)
 1790  LOCAL hex$
 1800  hex$ = STR$~address%
 1810  hex$ = STRING$(8-LEN(hex$), "0") + hex$
 1820  =hex$
 1830  
 1840  DEF PROCreadSector(drive%, track%, sector%, numSectors%)
 1850  oswordScratch%?0 = drive%
 1860  oswordScratch%!1 = rawSectorData%
 1870  oswordScratch%?5 = 3
 1880  oswordScratch%?6 = &13 : REM read data command
 1890  oswordScratch%?7 = track%
 1900  oswordScratch%?8 = sector% : REM start sector number
 1910  oswordScratch%?9 = (1 * &20) + numSectors% : REM length type 1 (256 byte)
 1920  A% = &7F
 1930  X% = oswordScratch% MOD &0100
 1940  Y% = oswordScratch% DIV &0100
 1950  CALL OSWORD
 1960  ENDPROC
 1970  
 1980  REM "length%" is inclusive, so "length%=2" will return 2 characters
 1990  DEF FNstringFromMemory(baseAddress%, length%)
 2000  LOCAL string$, offset%, char$
 2010  string$ = ""
 2020  offset% = 0
 2030  REPEAT
 2040  char$ = CHR$(baseAddress%?offset%)
 2050  IF char$ <> CHR$(0) THEN string$ = string$ + char$
 2060  offset% = offset% + 1
 2070  UNTIL char$=CHR$(0) OR offset% = length%
 2080  = string$
 2090  
 2100  DEF PROCsetFS(fs$)
 2110  IF currentFS$ <> fs$ THEN currentFS$=fs$:OSCLI(fs$)
 2120  ENDPROC
 2130  
 2140  DEF PROCadfsCdir(dir$)
 2150  LOCAL oscliCDir$
 2160  PROCsetFS("ADFS")
 2170  oscliCDir$ = "*CDIR :0.$." + dir$
 2180  IF logLevel% > 1 THEN PRINT oscliCDir$
 2190  OSCLI(oscliCDir$)
 2200  ENDPROC
 2210  
 2220  DEF FNfilteredFileName(fileName$)
 2230  LOCAL filteredFileName$
 2240  FOR char% = 1 TO LEN(fileName$)
 2250  char$ = MID$(fileName$, char%, 1)
 2260  IF char$ = "." THEN char$="-"
 2270  filteredFileName$ = filteredFileName$ + char$
 2280  NEXT
 2290  =filteredFileName$
 2300  
 2310  DEF PROCloadData(fullFileName$, memoryAddress%, length%, fileOffset%)
 2320  LOCAL fileHandle%
 2330  IF logLevel% > 1 THEN PRINT " => Loading """;fullFileName$;""" &";~length%" bytes at offset &";~fileOffset%;" to &";~memoryAddress%
 2340  DIM params% &10
 2350  fileHandle%=OPENIN(fullFileName$)
 2360  params%?0 = fileHandle%
 2370  params%!1 = memoryAddress%
 2380  params%!5 = length%
 2390  params%!9 = fileOffset%
 2400  A%=3 : REM mode = read bytes
 2410  X% = params% MOD &100
 2420  Y% = params% DIV &100
 2430  CALL OSGBPB
 2440  REM ...check error condition?
 2450  CLOSE#fileHandle%
 2460  ENDPROC
 2470  
 2480  DEF PROCsaveData(fullFileName$, memoryAddress%, length%, fileOffset%)
 2490  LOCAL fileHandle%
 2500  IF logLevel% > 1 THEN PRINT " => Writing """;fullFileName$;""" &";~length%;" bytes at offset &";~fileOffset%;" from &";~memoryAddress%
 2510  DIM params% &10
 2520  fileHandle%=OPENUP(fullFileName$)
 2530  params%?0 = fileHandle%
 2540  params%!1 = memoryAddress%
 2550  params%!5 = length%
 2560  params%!9 = fileOffset%
 2570  A%=1 : REM mode = write bytes
 2580  X% = params% MOD &100
 2590  Y% = params% DIV &100
 2600  CALL OSGBPB
 2610  REM ...check error condition?
 2620  CLOSE#fileHandle%
 2630  ENDPROC
